import asyncio
import logging
import datetime
import requests
import sqlite3
import urllib.request
import json
import re
import os
import random

from aiogram import Bot, types
from aiogram.utils import executor
from aiogram.utils.markdown import text
from aiogram.dispatcher import Dispatcher


from aiogram.utils.emoji import emojize
from aiogram.types.message import ContentType
from aiogram.utils.markdown import text, bold, italic, code, pre
from aiogram.types import ParseMode, InputMediaPhoto, InputMediaVideo, ChatActions

from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

from aiogram.contrib.fsm_storage.redis import RedisStorage2

from datetime import datetime

from config import TOKEN
import keyboards as kb
##import pandas as pd



##logging.basicConfig(format=u'%(filename)s [ LINE:%(lineno)+3s ]#%(levelname)+8s [%(asctime)s]  %(message)s',
##level=logging.INFO)

logging.basicConfig(filename='app.log', filemode='a', format='%(asctime)s - %(message)s', level=logging.INFO)

f = open('facts.txt', 'r', encoding='UTF-8')
facts = f.read().split('\n')
f.close()



bot = Bot(token=TOKEN)

##admins_id = [1049416300]

dp = Dispatcher(bot)


######### –æ–±—â–µ–µ #########

##now = datetime.now()
##current_time = now.strftime("%d/%m/%y %H:%M")

#########

##blacklist = [10494163009, 1049416300]

blacklist = [10494163009]



@dp.message_handler(commands=['start'])
async def process_start_command2(message: types.Message):
##await bot.send_photo(message.from_user.id, photo = GREETER)
 logging.info('–ù–∞—á–∞–ª–æ –ª–æ–≥–∞:')
 logging.info('–ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –±–æ—Ç—É (id -- username -- firstname  -- lastname):')
 #logging.info(message.chat.phone_number)
 logging.info(message.chat.id)
 logging.info(message.chat.username)
 logging.info(message.chat.first_name)
 logging.info(message.chat.last_name)
 now0 = datetime.now()
 current_time0 = now0.strftime("%d/%m/%y %H:%M")
 connect = sqlite3.connect('users.db')
 cursor = connect.cursor()
 cursor.execute("""CREATE TABLE IF NOT EXISTS login_id(
    id INTEGER,
    username INTEGER,
    firstname INTEGER,
    lastname INTEGER,
    current_time0 INTEGER
 )""")

 connect.commit()
 people_id = message.chat.id
 cursor.execute(f"SELECT id FROM login_id WHERE id = {people_id}")
 checkdata = cursor.fetchone()
 if checkdata is None:
  user_id = [message.chat.id, message.chat.username, message.chat.first_name, message.chat.last_name, current_time0]
  cursor.execute("INSERT INTO login_id VALUES(?,?,?,?,?);", user_id)
  connect.commit()
 else:
  pass
 
 if message.from_user.id in blacklist:
   await message.reply("—Ç—ã –Ω–µ –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç...(")
 else:
  ##with urllib.request.urlopen("https://cloud-api.yandex.net/v1/disk/public/resources?public_key=https://disk.yandex.ru/i/pWEj29_ibx9xQA") as url:
  ##      data0 = json.loads(url.read().decode())
  ##      jsonData = data0["file"]
  ##      url = jsonData
  ##      fileName1 = 'Note.jpg'
  ##      req = requests.get(url)
  ##      file = open(fileName1, 'wb')
  ##      for chunk in req.iter_content(100000):
  ##          file.write(chunk)
  ##      file.close()
  ##await bot.send_photo(message.from_user.id, photo=open(fileName1, 'rb')) 
  await bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç {message.chat.first_name} !')
  await bot.send_message(message.chat.id, '–≠—Ç–æ –±–æ—Ç –¥–ª—è –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–≤ –ú–ò–û–°–¢ –í–í–ì–£!')
  await bot.send_message(message.chat.id, '–î–∞–≤–∞–π –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!', reply_markup=kb.inline_kb_full_0)

@dp.callback_query_handler(lambda c: c.data == 'btn00')
async def process_callback_button1(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, '–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!', reply_markup=kb.inline_kb_full_0)


@dp.callback_query_handler(lambda c: c.data == 'btn01')
async def process_callback_button1(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    userid = callback_query.from_user.id
    filename00l = '–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏'    
    filenamel = "last%s.txt" % userid 
    ### filename = "%s.txt" % userid 
  ##  f = open(filenamel, 'w')  # open file in append mode
    f = open(filenamel, 'a+')  # open file in append mode
    ##with open(filename, encoding='utf-8', 'w') as f:
    now = datetime.now()
    current_time = now.strftime("%d/%m/%y %H:%M")
    f.write(f"{filename00l}, –ù–∞—á–∞—Ç–æ: {current_time}\n")
    f.close()    
    await bot.send_message(callback_query.from_user.id, '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—à–∏—Ö –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö: \nhttps://miost.vvsu.ru/enter/oop/', reply_markup=kb.inline_kb_full_0b)

@dp.callback_query_handler(lambda c: c.data == 'btn02')
async def process_callback_button1(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    userid = callback_query.from_user.id
    filename00l = '–ü—Ä–æ–µ–∫—Ç—ã'    
    filenamel = "last%s.txt" % userid 
    ### filename = "%s.txt" % userid 
  ##  f = open(filenamel, 'w')  # open file in append mode
    f = open(filenamel, 'a+')  # open file in append mode
    ##with open(filename, encoding='utf-8', 'w') as f:
    now = datetime.now()
    current_time = now.strftime("%d/%m/%y %H:%M")
    f.write(f"{filename00l}, –ù–∞—á–∞—Ç–æ: {current_time}\n")
    f.close()        
    await bot.send_message(callback_query.from_user.id, '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—à–∏—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö: \nhttps://miost.vvsu.ru/science/scientific_directions/', reply_markup=kb.inline_kb_full_0b)




@dp.callback_query_handler(lambda c: c.data == 'btn03')
async def process_callback_button1(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    userid = callback_query.from_user.id
    filename00l = '–§–∞–∫—Ç—ã'    
    filenamel = "last%s.txt" % userid 
    ### filename = "%s.txt" % userid 
  ##  f = open(filenamel, 'w')  # open file in append mode
    f = open(filenamel, 'a+')  # open file in append mode
    ##with open(filename, encoding='utf-8', 'w') as f:
    now = datetime.now()
    current_time = now.strftime("%d/%m/%y %H:%M")
    f.write(f"{filename00l}, –ù–∞—á–∞—Ç–æ: {current_time}\n")
    f.close()    
    await bot.send_message(callback_query.from_user.id, random.choice(facts), reply_markup=kb.inline_kb_full_0fb)
    
@dp.callback_query_handler(lambda c: c.data == 'btn03a')
async def process_callback_button1(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    userid = callback_query.from_user.id
    filename00l = '–≠–∫—Å–∫—Ä—É—Å–∏—è'    
    filenamel = "last%s.txt" % userid 
    ### filename = "%s.txt" % userid 
  ##  f = open(filenamel, 'w')  # open file in append mode
    f = open(filenamel, 'a+')  # open file in append mode
    ##with open(filename, encoding='utf-8', 'w') as f:
    now = datetime.now()
    current_time = now.strftime("%d/%m/%y %H:%M")
    f.write(f"{filename00l}, –ù–∞—á–∞—Ç–æ: {current_time}\n")
    f.close()       
    keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    button_phone = types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)
    keyboard.add(button_phone)
    await bot.send_message(callback_query.from_user.id, "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —ç–∫—Å–∫—É—Ä—Å–∏—é –≤ –û—Ç–µ–ª—å VLADIVOSTOK Grand Hotel & SPA 5*")    
    await bot.send_message(callback_query.from_user.id, "–î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —ç–∫—Å–∫—É—Ä—Å–∏—é –æ—Ç–ø—Ä–∞–≤—å –Ω–∞–º —Å–≤–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω")
    await bot.send_message(callback_query.from_user.id, '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ–¥–≥—Ä—É–∂–∞–µ—Ç—Å—è —Å –æ–±–ª–∞–∫–∞! –î–æ–∂–¥–∏—Å—å! ‚åõ')  
    with urllib.request.urlopen("https://cloud-api.yandex.net/v1/disk/public/resources?public_key=https://disk.yandex.ru/i/yVWoug7L-2kEMQ") as url:
        data1 = json.loads(url.read().decode())
        jsonData = data1["file"]
        url = jsonData
        fileName2 = 'pc.png'
        req = requests.get(url)
        file = open(fileName2, 'wb')
        for chunk in req.iter_content(100000):
            file.write(chunk)
        file.close()  
    await bot.send_photo(callback_query.from_user.id, photo=open(fileName2, 'rb'))         
    await bot.send_message(callback_query.from_user.id, "–ù–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤ –ø—Ä–∞–≤–æ–π —á–∞—Å—Ç–∏ —ç–∫—Ä–∞–Ω–∞")    
    await bot.send_message(callback_query.from_user.id, "–¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –æ—Ç–∫—Ä–æ–π —Å–ª–µ–¥—É—é—â—É—é –≤–µ—Ä—Å–∏—é –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è https://web.telegram.org/k/#@miost_vvsu_bot")   
    with urllib.request.urlopen("https://cloud-api.yandex.net/v1/disk/public/resources?public_key=https://disk.yandex.ru/i/uk1JfGaulWeW9A") as url:
        data0 = json.loads(url.read().decode())
        jsonData = data0["file"]
        url = jsonData
        fileName1 = 'phone.png'
        req = requests.get(url)
        file = open(fileName1, 'wb')
        for chunk in req.iter_content(100000):
            file.write(chunk)
        file.close()
    await bot.send_photo(callback_query.from_user.id, photo=open(fileName1, 'rb'))   
    await bot.send_message(callback_query.from_user.id, "–ù–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤ –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏ —ç–∫—Ä–∞–Ω–∞")  
    await bot.send_message(callback_query.from_user.id, "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞–∂–∞–≤ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É")  
    await bot.send_message(callback_query.from_user.id, "üòâ", reply_markup=keyboard)      



@dp.callback_query_handler(lambda c: c.data == 'btn03b')
async def process_callback_button1(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    userid = callback_query.from_user.id
    filename00l = '–î–û–î'    
    filenamel = "last%s.txt" % userid 
    ### filename = "%s.txt" % userid 
  ##  f = open(filenamel, 'w')  # open file in append mode
    f = open(filenamel, 'a+')  # open file in append mode
    ##with open(filename, encoding='utf-8', 'w') as f:
    now = datetime.now()
    current_time = now.strftime("%d/%m/%y %H:%M")
    f.write(f"{filename00l}, –ù–∞—á–∞—Ç–æ: {current_time}\n")
    f.close()        
    keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    button_phone = types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)
    keyboard.add(button_phone)
    await bot.send_message(callback_query.from_user.id, "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –¥–µ–Ω—å –æ—Ç–∫—Ä—ã—Ç—ã—Ö –¥–≤–µ—Ä–µ–π –ú–ò–û–°–¢ –í–í–ì–£")   
    await bot.send_message(callback_query.from_user.id, "–ñ–¥–µ–º —Ç–µ–±—è 18 –¥–µ–∫–∞–±—Ä—è —Å 11.00!")      
    await bot.send_message(callback_query.from_user.id, "–î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —ç–∫—Å–∫—É—Ä—Å–∏—é –æ—Ç–ø—Ä–∞–≤—å –Ω–∞–º —Å–≤–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω")
    await bot.send_message(callback_query.from_user.id, '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ–¥–≥—Ä—É–∂–∞–µ—Ç—Å—è —Å –æ–±–ª–∞–∫–∞! –î–æ–∂–¥–∏—Å—å! ‚åõ')  
    with urllib.request.urlopen("https://cloud-api.yandex.net/v1/disk/public/resources?public_key=https://disk.yandex.ru/i/yVWoug7L-2kEMQ") as url:
        data1 = json.loads(url.read().decode())
        jsonData = data1["file"]
        url = jsonData
        fileName2 = 'pc.png'
        req = requests.get(url)
        file = open(fileName2, 'wb')
        for chunk in req.iter_content(100000):
            file.write(chunk)
        file.close()  
    await bot.send_photo(callback_query.from_user.id, photo=open(fileName2, 'rb'))         
    await bot.send_message(callback_query.from_user.id, "–ù–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤ –ø—Ä–∞–≤–æ–π —á–∞—Å—Ç–∏ —ç–∫—Ä–∞–Ω–∞")    
    await bot.send_message(callback_query.from_user.id, "–¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –æ—Ç–∫—Ä–æ–π —Å–ª–µ–¥—É—é—â—É—é –≤–µ—Ä—Å–∏—é –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è https://web.telegram.org/k/#@miost_vvsu_bot")   
    with urllib.request.urlopen("https://cloud-api.yandex.net/v1/disk/public/resources?public_key=https://disk.yandex.ru/i/uk1JfGaulWeW9A") as url:
        data0 = json.loads(url.read().decode())
        jsonData = data0["file"]
        url = jsonData
        fileName1 = 'phone.png'
        req = requests.get(url)
        file = open(fileName1, 'wb')
        for chunk in req.iter_content(100000):
            file.write(chunk)
        file.close()
    await bot.send_photo(callback_query.from_user.id, photo=open(fileName1, 'rb'))   
    await bot.send_message(callback_query.from_user.id, "–ù–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤ –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏ —ç–∫—Ä–∞–Ω–∞")  
    await bot.send_message(callback_query.from_user.id, "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞–∂–∞–≤ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É")  
    await bot.send_message(callback_query.from_user.id, "üòâ", reply_markup=keyboard)      



@dp.callback_query_handler(lambda c: c.data == 'btn04')
async def process_callback_button1(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    userid = callback_query.from_user.id
    filename00l = '–û—Ç–∑—ã–≤—ã'    
    filenamel = "last%s.txt" % userid 
    ### filename = "%s.txt" % userid 
  ##  f = open(filenamel, 'w')  # open file in append mode
    f = open(filenamel, 'a+')  # open file in append mode
    ##with open(filename, encoding='utf-8', 'w') as f:
    now = datetime.now()
    current_time = now.strftime("%d/%m/%y %H:%M")
    f.write(f"{filename00l}, –ù–∞—á–∞—Ç–æ: {current_time}\n")
    f.close()        
    await bot.send_message(callback_query.from_user.id, '–ß—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ - –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ –µ–≥–æ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ', reply_markup=kb.inline_kb_full_0b)


   
   
@dp.callback_query_handler(lambda c: c.data == 'btn05')
async def process_callback_button1(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    userid = callback_query.from_user.id
    filename00l = '–°–≤—è–∑—å —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º'    
    filenamel = "last%s.txt" % userid 
    ### filename = "%s.txt" % userid 
  ##  f = open(filenamel, 'w')  # open file in append mode
    f = open(filenamel, 'a+')  # open file in append mode
    ##with open(filename, encoding='utf-8', 'w') as f:
    now = datetime.now()
    current_time = now.strftime("%d/%m/%y %H:%M")
    f.write(f"{filename00l}, –ù–∞—á–∞—Ç–æ: {current_time}\n")
    f.close()        
    await callback_query.message.delete()
   ## await bot.send_photo(callback_query.from_user.id, photo = CONTACT)
   ## await bot.send_message(callback_query.from_user.id, '–ø—Ä–∏ –≤—Ä–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º –ø–∏—à–∏ +79241311138')
    await bot.send_message(callback_query.from_user.id, '–î–æ—Ü–µ–Ω—Ç –∫–∞—Ñ–µ–¥—Ä—ã –ö–æ–Ω–æ–Ω–æ–≤ –ê—Ä—Ç–µ–º –Æ—Ä—å–µ–≤–∏—á. –ü–∏—à–∏!  [+79241311138](tg://user?id=1049416300)', reply_markup=kb.inline_kb_full_0b, parse_mode=ParseMode.MARKDOWN)

    



@dp.message_handler(content_types=ContentType.STICKER)
async def unknown_message(msg: types.Message):
    message_text = text(emojize('–Ø –Ω–µ –∑–Ω–∞—é, —á—Ç–æ —Å —ç—Ç–∏–º –¥–µ–ª–∞—Ç—å :astonished:'),
                        italic('\n–Ø –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–æ–º–Ω—é,'), '—á—Ç–æ –µ—Å—Ç—å',
                        code('–∫–æ–º–∞–Ω–¥–∞'), '/start')
    await msg.reply(message_text, parse_mode=ParseMode.MARKDOWN)


@dp.message_handler(content_types=ContentType.DOCUMENT)
async def unknown_message(msg: types.Message):
    message_text = text(emojize('–Ø –Ω–µ –∑–Ω–∞—é, —á—Ç–æ —Å —ç—Ç–∏–º –¥–µ–ª–∞—Ç—å :astonished:'),
                        italic('\n–Ø –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–æ–º–Ω—é,'), '—á—Ç–æ –µ—Å—Ç—å',
                        code('–∫–æ–º–∞–Ω–¥–∞'), '/start')
    await msg.reply(message_text, parse_mode=ParseMode.MARKDOWN)


@dp.message_handler(content_types=ContentType.VIDEO)
async def unknown_message(msg: types.Message):
    message_text = text(emojize('–Ø –Ω–µ –∑–Ω–∞—é, —á—Ç–æ —Å —ç—Ç–∏–º –¥–µ–ª–∞—Ç—å :astonished:'),
                        italic('\n–Ø –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–æ–º–Ω—é,'), '—á—Ç–æ –µ—Å—Ç—å',
                        code('–∫–æ–º–∞–Ω–¥–∞'), '/start')
    await msg.reply(message_text, parse_mode=ParseMode.MARKDOWN)


@dp.message_handler(content_types=["photo"])
async def download_photo(message: types.Message):
    userid = message.chat.id
    fn0p = userid
##    await message.photo[-1].download(destination_dir=f"{userid}")
    id_photo = message.photo[-1].file_id
    await bot.send_message(1049416300, fn0p)
    await bot.send_photo(1049416300, id_photo)
##    await bot.send_photo(888808670, id_photo)
    await bot.send_message(message.chat.id, '–§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!', reply_markup=kb.inline_kb_full_0b)


@dp.message_handler(lambda message: '~' in message.text)
async def any_text_message(message: types.Message):
    # –î–æ–ø–æ–ª–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç:
    userid = message.from_user.id
    fn0 = userid    
    ##print (userid)
    filename = "%s.txt" % userid
    f = open(filename, 'a+')  # open file in append mode
    ##with open(filename, encoding='utf-8', 'w') as f:
    ##f.write('\n' + message.text)
    now = datetime.now()
    current_time = now.strftime("%d/%m/%y %H:%M")
    f.write(f"#–ø—Ä–æ—Ñ–æ—Ä–∏–µ–Ω—Ç {message.text}, –∑–∞–ø–∏—Å–∞–Ω–æ: {current_time}\n")
    f.close()
    ## await message.delete()
   ## await state.finish()
    await bot.send_message(1049416300, fn0)
    await bot.send_message(1049416300, f'#–ø—Ä–æ—Ñ–æ—Ä–∏–µ–Ω—Ç {message.text}')
    await bot.send_message(message.chat.id, f'–û—Ç–ª–∏—á–Ω–æ! –¢–µ—Å—Ç–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ!', reply_markup=kb.inline_kb_full_0b)

@dp.message_handler(lambda message: message.text == "*")
async def any_text_message(message: types.Message):
    # –î–æ–ø–æ–ª–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç:
    userid = message.from_user.id
    ##print (userid)
    filename = "%s.txt" % userid
    f = open(filename, 'r')
    file_contents = f.read()
    ##with open(filename, encoding='utf-8') as f:
    ##    contents = f.read()
    await bot.send_message(message.chat.id, f'{file_contents}')
    ##await FSMAdmin.minus.set()
    ##await FSMAdmin.tilda.set()
    await bot.send_message(message.chat.id, f'–û—Ç–ª–∏—á–Ω–æ! –ñ—É—Ä–Ω–∞–ª –ø–æ–∫–∞–∑–Ω', reply_markup=kb.inline_kb_full_0b)

@dp.message_handler()
async def any_text_message(message: types.Message):
    # –î–æ–ø–æ–ª–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç:
    userid = message.from_user.id
    ##print (userid)
    fn0 = userid
    filename = "%s.txt" % userid
    f = open(filename, 'a+')  # open file in append mode
    ##with open(filename, encoding='utf-8', 'w') as f:
    ##f.write('\n' + message.text)
    now = datetime.now()
    current_time = now.strftime("%d/%m/%y %H:%M")
    f.write(f"{message.text}, –∑–∞–ø–∏—Å–∞–Ω–æ: {current_time}\n")
    f.close()
   ## await message.delete()
   ## await state.finish()
    await bot.send_message(1049416300, fn0)
    await bot.send_message(1049416300, message.text)
##    await bot.send_message(888808670, message.text)
    await bot.send_message(message.chat.id, f'–û—Ç–ª–∏—á–Ω–æ! –°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ!', reply_markup=kb.inline_kb_full_0b)

@dp.message_handler(content_types=ContentType.CONTACT, is_sender_contact=True)
async def contact_handler(message):

    userid = message.from_user.id
    ##print (userid)
    filename = "phone%s.txt" % userid
    f = open(filename, 'a+')  # open file in append mode
    ##with open(filename, encoding='utf-8', 'w') as f:
    ##f.write('\n' + message.text)
    now = datetime.now()
    current_time = now.strftime("%d/%m/%y %H:%M")
    f.write(f"{message.contact.phone_number}, –∑–∞–ø–∏—Å–∞–Ω–æ: {current_time}\n")
    f.close()
   ## await FSMAdmin.star.set()
   ## await message.delete()
   ## await state.finish()    
 ##  print(message.contact.phone_number) 
 ##   await FSMAdmin.passw.set()  
    await bot.send_message(1049416300, "–í –±–∞–∑—É –¥–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç!") 
    await bot.send_message(message.chat.id, "–¢–≤–æ–π –Ω–æ–º–µ—Ä —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω", reply_markup=types.ReplyKeyboardRemove())
    await bot.send_message(message.chat.id, "–ú—ã —Å–≤—è–∂–µ–º—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è", reply_markup=kb.inline_kb_full_0b) 

@dp.message_handler(content_types=ContentType.CONTACT, is_sender_contact=False)
async def contact_handler(message):
    await bot.send_message(message.chat.id, "–≠—Ç–æ –Ω–µ —Ç–≤–æ–π –Ω–æ–º–µ—Ä")



    

if __name__ == '__main__':
    executor.start_polling(dp)
